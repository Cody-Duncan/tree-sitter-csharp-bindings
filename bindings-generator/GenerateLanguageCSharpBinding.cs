using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;

namespace bindings_generator
{
    internal class GenerateLanguageCSharpBinding
    {
        const string moduleNameMarkerSnakeCase = "REPLACE_module_name";
        const string moduleNameMarkerTitleCase = "REPLACE_ModuleName";
        const string csharpBindingContent= 
@"// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;
using __CallingConvention = global::System.Runtime.InteropServices.CallingConvention;
using __IntPtr = global::System.IntPtr;

#pragma warning disable CS0109 // Member does not hide an inherited member; new keyword is not required

namespace REPLACE_module_name
{
    public unsafe partial class REPLACE_module_name
    {
        public partial struct __Internal
        { 
            [SuppressUnmanagedCodeSecurity, DllImport(""REPLACE_module_name"", EntryPoint = ""REPLACE_module_name"", CallingConvention = __CallingConvention.Cdecl)]
            internal static extern __IntPtr REPLACE_ModuleName();
        }

        public static global::tree_sitter.TSLanguage REPLACE_ModuleName()
        {
            var ___ret = __Internal.REPLACE_ModuleName();
            var __result0 = global::tree_sitter.TSLanguage.__GetOrCreateInstance(___ret, false);
            return __result0;
        }
    }
}
";
        public static void Generate(string moduleName, string outputDir)
        {
            string moduleNamespace = moduleName.Replace('-', '_');
            // Convert snake_case to TitleCase
            // e.g. tree_sitter_python -> TreeSitterPython
            // ((^\w)|(_\w))
            // This is (first character | character preceded by underscore)
            // (^\w) - first character
            // (_\w) - character preceded by underscore
            string moduleFunctionName = Regex.Replace(moduleNamespace, @"((^\w)|(_\w))", m => m.ToString().Trim('_').ToUpper());

            string cSharpHeaderText = csharpBindingContent.Replace(moduleNameMarkerSnakeCase, moduleNamespace).Replace(moduleNameMarkerTitleCase, moduleFunctionName);

            string sSharpFileName = moduleName + ".cs";
            string cSharpFilepath = Path.Join(outputDir, sSharpFileName);

            Console.WriteLine($"Generating C# binding {sSharpFileName} for module {moduleNamespace} into {outputDir}");
            File.WriteAllText(cSharpFilepath, cSharpHeaderText);
        }
    }
}
