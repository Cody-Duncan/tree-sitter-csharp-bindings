using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;

namespace bindings_generator
{
    internal class GenerateBindingsTestProgram
    {
        const string moduleNameMarkerSnakeCase = "REPLACE_module_name";
        const string moduleNameMarkerTitleCase = "REPLACE_ModuleName";
        const string csharpBindingTestProgramContent =
@"// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by BindingsGenerator.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// 
// The purpose of this test is just to verify that the compiled bindings dll
// can actually build.
// It does NOT test whether it can parse.
// ----------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using tree_sitter;

namespace bindings_test
{
    class Parser : IDisposable
    {
        TSParser m_parser;

        public Parser()
        {
            m_parser = api.TsParserNew();
        }

        public void Dispose()
        {
            api.TsParserDelete(m_parser);
        }

        public void SetLanguage()
        {
            // This will just test whether the first grammar can compile.
            tree_sitter.TSLanguage language = REPLACE_module_name.REPLACE_module_name.REPLACE_ModuleName();
            api.TsParserSetLanguage(m_parser, language);
        }

        public ParseTree Parse(string content)
        {
            var tree = api.TsParserParseString(m_parser, null, content, (uint)content.Length);
            return new ParseTree(tree);
        }
    }

    class Node
    {
        TSNode m_node;
        public Node(TSNode node)
        { 
            m_node = node; 
        }

        public string Type
        {
            get
            {
                return api.TsNodeType(m_node);
            }
        }

        public ushort Symbol
        {
            get
            {
                return api.TsNodeSymbol(m_node);
            }
        }
    }

    class ParseTree
    {
        TSTree m_tree;
        public ParseTree(TSTree tree)
        {
            m_tree = tree;
        }

        public Node Root 
        {   get 
            { 
                var node = api.TsTreeRootNode(m_tree); ;
                return new Node(node);
            } 
        }
    }

    internal class Program
    {
        // THIS IS AUTOGENERATED 
        // Do not edit this file or all your changes will be lost after re-generation.
        static int Main(string[] args)
        {
            Console.WriteLine(""Hello World!"");
            using (var parser = new Parser())
            {
                Console.WriteLine(""Made a Parser"");
                parser.SetLanguage();
                var tree = parser.Parse(""print('Hello, world!')"");
                if (tree == null)
                {
                    Console.WriteLine(""Parsed Tree is NULL"");
                }
                var node = tree.Root;
                Console.WriteLine($""Root Node's type is `{node.Type}`"");
            }
            Console.WriteLine(""Deleted a Parser"");
            return 0;
        }
    }
}

";
        public static void Generate(string moduleName, string outputDir)
        {
            string moduleNamespace = moduleName.Replace('-', '_');
            // Convert snake_case to TitleCase
            // e.g. tree_sitter_python -> TreeSitterPython
            // ((^\w)|(_\w))
            // This is (first character | character preceded by underscore)
            // (^\w) - first character
            // (_\w) - character preceded by underscore
            string moduleFunctionName = Regex.Replace(moduleNamespace, @"((^\w)|(_\w))", m => m.ToString().Trim('_').ToUpper());

            string cSharpHeaderText = csharpBindingTestProgramContent
                .Replace(moduleNameMarkerSnakeCase, moduleNamespace)
                .Replace(moduleNameMarkerTitleCase, moduleFunctionName);

            string cSharpFileName = "Program.cs";
            string cSharpFilepath = Path.Join(outputDir, cSharpFileName);

            Console.WriteLine($"Generating C# test program {cSharpFileName} for module {moduleNamespace} into {outputDir}");
            File.WriteAllText(cSharpFilepath, cSharpHeaderText);
        }
    }
}