cmake_minimum_required(VERSION 3.29)

# FetchContent added in CMake 3.11, downloads during the configure step
# FetchContent_MakeAvailable was added in CMake 3.14; simpler usage
include(FetchContent)

# Step 1: Download the tree-sitter library, and all tree-sitter grammars

# tree-sitter library
FetchContent_Declare(
  tree_sitter
  GIT_REPOSITORY https://github.com/tree-sitter/tree-sitter.git
  GIT_TAG v0.20.8)
  
# ----------------------------------------------------------------------
## START EDIT HERE 

# Add FetchContent_Declare for new grammars as needed.
# Make the <name> argument match the name of the grammar in lower_snake_case.
# E.G. tree_sitter_mylang 

# tree-sitter-python library
FetchContent_Declare(
  tree_sitter_python
  GIT_REPOSITORY https://github.com/tree-sitter/tree-sitter-python.git)

## 1. ADD NEW GRAMMARS HERE

## 2. UPDATE GRAMMARS LIST
## Add the FetchContent_Declare targets (<name> argument) to this list
## E.G. `set(TREE_SITTER_GRAMMARS_LIST tree_sitter_python tree_sitter_mylang)`
set(TREE_SITTER_GRAMMARS_LIST tree_sitter_python)

## END EDIT HERE
# ----------------------------------------------------------------------

# Start downloading the grammar repositories
FetchContent_MakeAvailable(tree_sitter_python tree_sitter)

# ----------------------------- Functions ------------------------------

# ----- get_deps_src_paths()

## Convert a list of FetchContent_Declare target names into their source directory
## E.G. 'tree_sitter_python' -convert-> '${tree_sitter_python_SOURCE_DIR}' -expand-> 'D:/repo/tree-sitter-bindings/build/_deps/tree_sitter_python-src'
## GRAMMARS_LIST - a list of the the grammar FetchContent_Declare <name>s. E.G. 'tree_sitter_python'
## OUTPUT_VARIABLE - the name of the variable to generate where the resulting list of source directories will be stored. E.G. GRAMMARS_PATHS
## Example
## ```cmake
## FetchContent_Declare(tree_sitter_python GIT_REPOSITORY https://github.com/tree-sitter/tree-sitter-python.git GIT_TAG v0.20.4)
## FetchContent_Declare(tree_sitter_ruby GIT_REPOSITORY https://github.com/tree-sitter/tree-sitter-ruby.git GIT_TAG v0.20.1)
## # names used in the input list should match the <name> parameter that went into FetchContent_Declare
## set(GRAMMARS_LIST tree_sitter_python tree_sitter_ruby) 
##
## get_deps_src_paths(${GRAMMARS_LIST} GRAMMARS_PATHS)
##
## message(STATUS "${GRAMMARS_PATHS}")
## # outputs "D:/repo/tree-sitter-bindings/build/_deps/tree_sitter_python-src;D:/repo/tree-sitter-bindings/build/_deps/tree_sitter_ruby-src"
## ```
function(get_deps_src_paths GRAMMARS_LIST OUTPUT_VARIABLE)
  # merge GRAMMARS_LIST with ARGN. that way this function can be called without having to surround the argument in quotes: `func(${INPUT_LIST_VAR})`
  # This also makes it so calling with 0 arguments is disallowed, e.g. `func()`
  set( _GRAMMARS_LIST ${GRAMMARS_LIST} ${ARGN} )

  # Strip whitespace, to-lower, and append sourc_dir -> generates the variable names generated by FetchContent_Declare for each dependency
  # E.G. tree_sitter_python -> tree_sitter_python_SOURCE_DIR
  list(TRANSFORM _GRAMMARS_LIST STRIP)
  list(TRANSFORM _GRAMMARS_LIST TOLOWER)
  list(TRANSFORM _GRAMMARS_LIST APPEND _SOURCE_DIR)

  # Expand the list of variable names into a list of the dependency source paths.
  # E.G. tree_sitter_python_SOURCE_DIR -> D:/repo/tree-sitter-bindings/build/_deps/tree_sitter_python-src
  SET(${OUTPUT_VARIABLE} "")
  foreach(target ${_GRAMMARS_LIST})
    LIST(APPEND ${OUTPUT_VARIABLE} "${${target}}")
  endforeach()
  #message(STATUS "OUTPUT_VARIABLE=${${OUTPUT_VARIABLE}}")

  return(PROPAGATE ${OUTPUT_VARIABLE})
endfunction()

# ------------------------- Generator Platform -------------------------

# Default: x64
if(CMAKE_GENERATOR_PLATFORM STREQUAL "x64" OR CMAKE_GENERATOR_PLATFORM STREQUAL "")
  set(CMAKE_GENERATOR_PLATFORM "x64")
  set(DOTNET_GENERATOR_PLATFORM "x64")
elseif(CMAKE_GENERATOR_PLATFORM STREQUAL "Win32")
  set(DOTNET_GENERATOR_PLATFORM "x86")
else()
  message(FATAL_ERROR "Generator platform is set to '${CMAKE_GENERATOR_PLATFORM}', which is not supported by managed projects")
endif()

# ---------------- Project: tree-sitter-csharp-bindings ----------------

project(
  tree-sitter-csharp-bindings
  VERSION 1.0
  LANGUAGES CXX C)

# Echo the command line for calls to execute_process()
set(CMAKE_EXECUTE_PROCESS_COMMAND_ECHO STDOUT)

# Only do these if this is the main project, and not if it is included through add_subdirectory
if(CMAKE_PROJECT_NAME STREQUAL PROJECT_NAME)

  # Optionally set things like CMAKE_CXX_STANDARD, CMAKE_POSITION_INDEPENDENT_CODE here

  # Let's ensure -std=c++xx instead of -std=g++xx
  set(CMAKE_CXX_EXTENSIONS OFF)

  # Let's nicely support folders in IDEs
  set_property(GLOBAL PROPERTY USE_FOLDERS ON)
endif()

# ----- Generate C and C# Bindings Source Files

# Take the list of tree-sitter grammars that have been downloaded,
# and get their source directories.
# E.G. 'tree_sitter_python' -> 'D:/repo/tree-sitter-bindings/build/_deps/tree_sitter_python-src'
get_deps_src_paths(${TREE_SITTER_GRAMMARS_LIST} TREE_SITTER_GRAMMARS_PATHS)

if("${TREE_SITTER_GRAMMARS_PATHS}" STREQUAL "")
  message(FATAL_ERROR "TREE_SITTER_GRAMMARS_PATHS is empty. Failed to build a list of tree-sitter grammar source directories. Halting")
endif()

set(CSHARP_SOURCE_OUTDIR "${CMAKE_CURRENT_SOURCE_DIR}/GeneratedCSharpBindings")
set(C_SOURCE_OUTDIR "${CMAKE_CURRENT_SOURCE_DIR}/GeneratedCHeaders")
set(CSHARP_TEST_PROGRAM_SOURCE_OUTDIR "${CMAKE_CURRENT_SOURCE_DIR}/GeneratedCSharpTestProgram")

set(ENV{IN_
_TREE_SITTER_SRC_PATH} "${tree_sitter_SOURCE_DIR}")
set(ENV{IN_DEBUG_TREE_SITTER_GRAMMAR_SRC_PATH} ${TREE_SITTER_GRAMMARS_PATHS})
set(ENV{IN_DEBUG_CSHARP_SOURCE_OUTDIR} ${CSHARP_SOURCE_OUTDIR})
set(ENV{IN_DEBUG_C_SOURCE_OUTDIR} ${C_SOURCE_OUTDIR})
set(ENV{IN_CSHARP_TEST_PROGRAM_SOURCE_OUTDIR} ${CSHARP_TEST_PROGRAM_SOURCE_OUTDIR})

# Build the BindingsGenerator.exe
execute_process (
  COMMAND pwsh.exe -ExecutionPolicy Bypass -NoProfile -NonInteractive -File "${CMAKE_CURRENT_SOURCE_DIR}/BindingsGenerator/build.ps1"
  WORKING_DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}/BindingsGenerator"
  RESULT_VARIABLE BINDINGS_GENERATOR_BUILD_RESULT
)
set(BINDINGS_GENERATOR_EXE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/BindingsGenerator/build/bin/Release/BindingsGenerator.exe")

if(NOT BINDINGS_GENERATOR_BUILD_RESULT EQUAL "0")
  message(FATAL_ERROR "Failed to build BindingsGenerator.exe. Failed with error code ${BINDINGS_GENERATOR_BUILD_RESULT}.")
endif()

if(NOT EXISTS ${BINDINGS_GENERATOR_EXE_PATH})
  message(FATAL_ERROR "Build but could not find BindingsGenerator.exe at expected location:${BINDINGS_GENERATOR_EXE_PATH}")
endif()

# generate the C and C# bindings to the libraries

execute_process (
  COMMAND ${BINDINGS_GENERATOR_EXE_PATH} --TreeSitterRepoPath "${tree_sitter_SOURCE_DIR}" --TreeSitterGrammarPaths ${TREE_SITTER_GRAMMARS_PATHS} --CSharpBindingsOutputPath ${CSHARP_SOURCE_OUTDIR} --CGeneratedHeadersOutputPath ${C_SOURCE_OUTDIR} --CSharpTestProgramOutputPath ${CSHARP_TEST_PROGRAM_SOURCE_OUTDIR}
  WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
  RESULT_VARIABLE BINDINGS_GENERATOR_RESULT
)

if(NOT BINDINGS_GENERATOR_RESULT EQUAL "0")
  message(FATAL_ERROR "BindingsGenerator.exe failed with error code ${BINDINGS_GENERATOR_RESULT}.")
endif()

# ----- Generate Native DLL Library for tree-sitter 

set(tree_sitter_id "tree_sitter")
set(tree_sitter_lib_project_name "${tree_sitter_id}")
message(STATUS "Generating native library ${tree_sitter_lib_project_name} for ${tree_sitter_id}")

# Find lib.c source file, all the /src/*.h headers, and the generated DLL header
file(GLOB tree_sitter_LIB_FILE "${tree_sitter_SOURCE_DIR}/lib/src/lib.c")
file(GLOB tree_sitter_SRC_HEADERS "${tree_sitter_SOURCE_DIR}/lib/src/*.h")
file(GLOB tree_sitter_GENERATED_HEADER "${C_SOURCE_OUTDIR}/${tree_sitter_id}_src/*.h")
set(tree_sitter_SRC_FILES "")
list(APPEND tree_sitter_SRC_FILES ${tree_sitter_LIB_FILE})
list(APPEND tree_sitter_SRC_FILES ${tree_sitter_SRC_HEADERS})
list(APPEND tree_sitter_SRC_FILES ${tree_sitter_GENERATED_HEADER})

# Create the tree_sitter_lib
add_library(
  ${tree_sitter_lib_project_name}
  SHARED
  ${tree_sitter_SRC_FILES}
)
set_target_properties(
  ${tree_sitter_lib_project_name} 
  PROPERTIES 
  VS_GLOBAL_ResolveNuGetPackages "false"
  LINKER_LANGUAGE C
  RUNTIME_OUTPUT_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}/lib"
  LIBRARY_OUTPUT_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}/lib"
  ARCHIVE_OUTPUT_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}/lib")
set_source_files_properties(
  ${tree_sitter_SRC_FILES} 
  PROPERTIES 
  LANGUAGE C
  C_STANDARD 99)
set_source_files_properties(
  ${tree_sitter_SRC_HEADERS}
  PROPERTIES 
  HEADER_FILE_ONLY TRUE)
target_include_directories(
  ${tree_sitter_lib_project_name} 
  PUBLIC
  ${C_SOURCE_OUTDIR})
target_compile_definitions(
  ${tree_sitter_lib_project_name}
  PUBLIC
  EXPORT_TREE_SITTER_API
  _CRT_SECURE_NO_WARNINGS
  _CRT_SECURE_NO_DEPRECATE)
target_compile_options(
  ${tree_sitter_lib_project_name}
  PUBLIC 
  "/FC")

# Add in the /src/*.c files, but DO NOT BUILD
file(GLOB tree_sitter_NO_BUILD_SRC_FILES "${tree_sitter_SOURCE_DIR}/lib/src/*.c")
list(REMOVE_ITEM tree_sitter_NO_BUILD_SRC_FILES ${tree_sitter_LIB_FILE})
#message(STATUS "tree_sitter_SRC_FILES=${tree_sitter_SRC_FILES}")
#message(STATUS "tree_sitter_NO_BUILD_SRC_FILES=${tree_sitter_NO_BUILD_SRC_FILES}")
# add files to the project
target_sources(${tree_sitter_lib_project_name} PRIVATE ${tree_sitter_NO_BUILD_SRC_FILES})
# make them not build
set_source_files_properties(
   ${tree_sitter_NO_BUILD_SRC_FILES} 
   PROPERTIES 
   EXCLUDE_FROM_ALL TRUE
   EXCLUDE_FROM_DEFAULT_BUILD TRUE
   HEADER_FILE_ONLY TRUE)

# ----- Generate Native DLL Libraries for Each Grammar 

set(grammar_libs_list "")

foreach(grammar_id grammar_path IN ZIP_LISTS TREE_SITTER_GRAMMARS_LIST TREE_SITTER_GRAMMARS_PATHS)
  set(grammar_lib_project_name "${grammar_id}")
  list(APPEND grammar_libs_list ${grammar_lib_project_name})
  message(STATUS "Generating native library ${grammar_lib_project_name} for ${grammar_id}")
  file(GLOB grammar_SRC_FILES "${grammar_path}/src/*.c")
  file(GLOB grammar_GENERATED_HEADER "${C_SOURCE_OUTDIR}/${grammar_id}/*.h")
  list(APPEND grammar_SRC_FILES ${grammar_GENERATED_HEADER})
  add_library(
    ${grammar_lib_project_name}
    SHARED
    ${grammar_SRC_FILES}
  )
  set_target_properties(
    ${grammar_lib_project_name} 
    PROPERTIES 
    VS_GLOBAL_ResolveNuGetPackages "false"
    LINKER_LANGUAGE C
    RUNTIME_OUTPUT_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}/lib"
    LIBRARY_OUTPUT_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}/lib"
    ARCHIVE_OUTPUT_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}/lib")
  set_source_files_properties(
    ${grammar_SRC_FILES} 
    PROPERTIES 
    LANGUAGE C
    C_STANDARD 99)
  set_source_files_properties(
    ${grammar_GENERATED_HEADER}
    PROPERTIES 
    HEADER_FILE_ONLY TRUE)
  target_include_directories(
    ${grammar_lib_project_name}
    PRIVATE
    ${C_SOURCE_OUTDIR})
  target_compile_definitions(
    ${grammar_lib_project_name}
    PUBLIC
    DO_NOT_EXPORT_TREE_SITTER_API
    _CRT_SECURE_NO_WARNINGS
    _CRT_SECURE_NO_DEPRECATE)
  target_compile_options(
    ${tree_sitter_lib_project_name}
    PUBLIC 
    "/FC")
endforeach()

# ----- Generate .Net Library to Encapsulate Native Libraries
 
set(bindings_lib_project_name "TreeSitterBindings")

message(STATUS "Generating c# bindings ibrary: ${bindings_lib_project_name}")

set(CMAKE_DOTNET_TARGET_FRAMEWORK "net6.0")
set(CMAKE_DOTNET_SDK "Microsoft.NET.Sdk")
set(CMAKE_CSharp_FLAGS "/platform:${DOTNET_GENERATOR_PLATFORM}")

file(GLOB TreeSitterBindings_SRC_FILES "${CSHARP_SOURCE_OUTDIR}/*.cs")
add_library(
  ${bindings_lib_project_name}
  SHARED
	${TreeSitterBindings_SRC_FILES}
)
set_source_files_properties(
  ${TreeSitterBindings_SRC_FILES} 
  PROPERTIES 
  LANGUAGE CSharp)
set_target_properties(
  ${bindings_lib_project_name}
  PROPERTIES
  DOTNET_SDK "Microsoft.NET.Sdk"
  DOTNET_TARGET_FRAMEWORK "net6.0"
  VS_GLOBAL_MinimumVisualStudioVersion "14.0"
  VS_GLOBAL_Nullable "enable"
  VS_GLOBAL_AllowUnsafeBlocks "true"
  VS_GLOBAL_ImplicitUsings "enable"
  VS_GLOBAL_Platforms ${DOTNET_GENERATOR_PLATFORM}
  COMPILE_OPTIONS "/platform:${DOTNET_GENERATOR_PLATFORM} /langversion:8"
  VS_PACKAGE_REFERENCES "CppSharp.Runtime_1.0.54.626"
  LINKER_LANGUAGE CSharp
  RUNTIME_OUTPUT_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}/lib"
  LIBRARY_OUTPUT_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}/lib"
  ARCHIVE_OUTPUT_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}/lib"
)

# - link the native libraries as dependencies
target_link_libraries(${bindings_lib_project_name} ${tree_sitter_lib_project_name} ${grammar_libs_list})

# ----- Generate .Net Test Program

set(bindings_test_project_name "TreeSitterBindingsTest")

message(STATUS "Generating test program: ${bindings_test_project_name}")

file(GLOB TreeSitterBindingsTest_SRC_FILES "${CSHARP_TEST_PROGRAM_SOURCE_OUTDIR}/*.cs")
add_executable(
  ${bindings_test_project_name}
	${TreeSitterBindingsTest_SRC_FILES}
)
set_source_files_properties(
  ${TreeSitterBindingsTest_SRC_FILES} 
  PROPERTIES 
  LANGUAGE CSharp)
set_target_properties(
  ${bindings_test_project_name}
  PROPERTIES
  DOTNET_SDK "Microsoft.NET.Sdk"
  DOTNET_TARGET_FRAMEWORK "net6.0"
  VS_GLOBAL_MinimumVisualStudioVersion "14.0"
  VS_GLOBAL_Nullable "enable"
  VS_GLOBAL_AllowUnsafeBlocks "true"
  VS_GLOBAL_ImplicitUsings "enable"
  VS_GLOBAL_Platforms ${DOTNET_GENERATOR_PLATFORM}
  COMPILE_OPTIONS "/platform:${DOTNET_GENERATOR_PLATFORM} /langversion:8"
  LINKER_LANGUAGE CSharp
  RUNTIME_OUTPUT_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}/bin"
)

target_link_libraries(${bindings_test_project_name} ${bindings_lib_project_name} ${tree_sitter_lib_project_name} ${grammar_libs_list})

# Post-Config Steps that cannot be setup by cmake
#
# 1. Copy the .dll files into the .bin directory, so the .exe can find the dlls.
#   Visual studio generators for .NET SDK projects aren't able to generate post-build events.
#   Which means there's not a good way to copy the libs to the bin folder to run TreeSitterBindingsTest.exe
#   Workaround: 
#     That copy is handled by a step in build.ps1. It's not an elegant solution, but it works well enough.
#
# 2. Specify the default platform configuration to x64
#   The C# and the C libraries need to match on platform, and 'Any CPU' can break that requirement.
#   However, cmake has a bug (https://gitlab.kitware.com/cmake/cmake/-/issues/23513) where .NET SDK style projects
#   will always generate as 'Any CPU' (even when that platform isn't defined). This leads to Visual Studio reporting 
#   there are errors in the configuration mappings, and tells the user to open the configuration manager to resolve it.
#   Workaround:
#      fix_sln.ps1 is run by build.ps1. It does a quick find-and-replace on tree-sitter-csharp-bindings.sln, 
#      swapping 'Any CPU' -> 'x64'
#
# TL;DR: build.ps1 wraps around cmake to handle some post-build scripting that cmake can't.